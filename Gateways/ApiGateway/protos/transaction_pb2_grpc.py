# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import transaction_pb2 as transaction__pb2


class TransactionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserTransactions = channel.unary_unary(
                '/transaction.TransactionService/GetUserTransactions',
                request_serializer=transaction__pb2.GetUserTransactionsRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionsResponse.FromString,
                )
        self.GetAccountTransactions = channel.unary_unary(
                '/transaction.TransactionService/GetAccountTransactions',
                request_serializer=transaction__pb2.GetAccountTransactionsRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionsResponse.FromString,
                )
        self.GetTransactionById = channel.unary_unary(
                '/transaction.TransactionService/GetTransactionById',
                request_serializer=transaction__pb2.GetTransactionByIdRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.CreatePaymentTransaction = channel.unary_unary(
                '/transaction.TransactionService/CreatePaymentTransaction',
                request_serializer=transaction__pb2.AddTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.UpdateTransaction = channel.unary_unary(
                '/transaction.TransactionService/UpdateTransaction',
                request_serializer=transaction__pb2.UpdateTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.DeleteTransaction = channel.unary_unary(
                '/transaction.TransactionService/DeleteTransaction',
                request_serializer=transaction__pb2.DeleteTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )


class TransactionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePaymentTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTransactions,
                    request_deserializer=transaction__pb2.GetUserTransactionsRequest.FromString,
                    response_serializer=transaction__pb2.TransactionsResponse.SerializeToString,
            ),
            'GetAccountTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountTransactions,
                    request_deserializer=transaction__pb2.GetAccountTransactionsRequest.FromString,
                    response_serializer=transaction__pb2.TransactionsResponse.SerializeToString,
            ),
            'GetTransactionById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionById,
                    request_deserializer=transaction__pb2.GetTransactionByIdRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'CreatePaymentTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentTransaction,
                    request_deserializer=transaction__pb2.AddTransactionRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'UpdateTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTransaction,
                    request_deserializer=transaction__pb2.UpdateTransactionRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTransaction,
                    request_deserializer=transaction__pb2.DeleteTransactionRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transaction.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/GetUserTransactions',
            transaction__pb2.GetUserTransactionsRequest.SerializeToString,
            transaction__pb2.TransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/GetAccountTransactions',
            transaction__pb2.GetAccountTransactionsRequest.SerializeToString,
            transaction__pb2.TransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/GetTransactionById',
            transaction__pb2.GetTransactionByIdRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePaymentTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/CreatePaymentTransaction',
            transaction__pb2.AddTransactionRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/UpdateTransaction',
            transaction__pb2.UpdateTransactionRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/DeleteTransaction',
            transaction__pb2.DeleteTransactionRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
